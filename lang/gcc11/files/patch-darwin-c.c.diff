--- gcc/config/darwin-c.c.orig	2021-06-15 19:25:01.000000000 -0700
+++ gcc/config/darwin-c.c	2021-06-15 19:25:23.000000000 -0700
@@ -42,10 +42,10 @@
 static bool using_frameworks = false;
 
 static const char *find_subframework_header (cpp_reader *pfile, const char *header,
-					     cpp_dir **dirp);
+               cpp_dir **dirp);
 
 struct fld_align_stack {
-  int	alignment;
+  int alignment;
   struct fld_align_stack * prev;
 };
 
@@ -136,18 +136,18 @@
     {
       tok = pragma_lex (&decl);
       if (tok == CPP_NAME && decl)
-	{
-	  tree local = lookup_name (decl);
-	  if (local && (TREE_CODE (local) == PARM_DECL
-			|| TREE_CODE (local) == VAR_DECL))
-	    {
-	      TREE_USED (local) = 1;
-	      DECL_READ_P (local) = 1;
-	    }
-	  tok = pragma_lex (&x);
-	  if (tok != CPP_COMMA)
-	    break;
-	}
+  {
+    tree local = lookup_name (decl);
+    if (local && (TREE_CODE (local) == PARM_DECL
+      || TREE_CODE (local) == VAR_DECL))
+      {
+        TREE_USED (local) = 1;
+        DECL_READ_P (local) = 1;
+      }
+    tok = pragma_lex (&x);
+    if (tok != CPP_COMMA)
+      break;
+  }
     }
 
   if (tok != CPP_CLOSE_PAREN)
@@ -202,17 +202,17 @@
   for (i = 0; i < num_frameworks; ++i)
     {
       if (len == frameworks_in_use[i].len
-	  && strncmp (name, frameworks_in_use[i].name, len) == 0)
-	{
-	  return;
-	}
+    && strncmp (name, frameworks_in_use[i].name, len) == 0)
+  {
+    return;
+  }
     }
   if (i >= max_frameworks)
     {
       max_frameworks = i*2;
       max_frameworks += i == 0;
       frameworks_in_use = XRESIZEVEC (struct frameworks_in_use,
-				      frameworks_in_use, max_frameworks);
+              frameworks_in_use, max_frameworks);
     }
   dir_name = XNEWVEC (char, len + 1);
   memcpy (dir_name, name, len);
@@ -234,10 +234,10 @@
   for (i = 0; i < num_frameworks; ++i)
     {
       if (len == frameworks_in_use[i].len
-	  && strncmp (name, frameworks_in_use[i].name, len) == 0)
-	{
-	  return frameworks_in_use[i].dir;
-	}
+    && strncmp (name, frameworks_in_use[i].name, len) == 0)
+  {
+    return frameworks_in_use[i].dir;
+  }
     }
   return 0;
 }
@@ -282,7 +282,7 @@
     return 0;
 
   frname = XNEWVEC (char, strlen (fname) + dir->len + 2
-		    + strlen(".framework/") + strlen("PrivateHeaders"));
+        + strlen(".framework/") + strlen("PrivateHeaders"));
   memcpy (&frname[0], dir->name, dir->len);
   frname_len = dir->len;
   if (frname_len && frname[frname_len-1] != '/')
@@ -296,19 +296,19 @@
     {
       frname[frname_len-1] = 0;
       if (stat (frname, &st) == 0)
-	{
-	  /* As soon as we find the first instance of the framework,
-	     we stop and never use any later instance of that
-	     framework.  */
-	  add_framework (fname, fname_len, dir);
-	}
+  {
+    /* As soon as we find the first instance of the framework,
+       we stop and never use any later instance of that
+       framework.  */
+    add_framework (fname, fname_len, dir);
+  }
       else
-	{
-	  /* If we can't find the parent directory, no point looking
-	     further.  */
-	  free (frname);
-	  return 0;
-	}
+  {
+    /* If we can't find the parent directory, no point looking
+       further.  */
+    free (frname);
+    return 0;
+  }
       frname[frname_len-1] = '/';
     }
 
@@ -316,13 +316,13 @@
   for (i = 0; framework_header_dirs[i].dirName; i++)
     {
       memcpy (&frname[frname_len],
-	       framework_header_dirs[i].dirName,
-	       framework_header_dirs[i].dirNameLen);
+         framework_header_dirs[i].dirName,
+         framework_header_dirs[i].dirNameLen);
       strcpy (&frname[frname_len + framework_header_dirs[i].dirNameLen],
-	      &fname[fname_len]);
+        &fname[fname_len]);
 
       if (stat (frname, &st) == 0)
-	return frname;
+  return frname;
     }
 
   free (frname);
@@ -370,8 +370,8 @@
      sfrname = /System/Library/Frameworks/Foundation.framework/Frameworks/CarbonCore.framework/Headers/OSUtils.h */
 
   sfrname = XNEWVEC (char, strlen (pname) + strlen (fname) + 2 +
-			      strlen ("Frameworks/") + strlen (".framework/")
-			      + strlen ("PrivateHeaders"));
+            strlen ("Frameworks/") + strlen (".framework/")
+            + strlen ("PrivateHeaders"));
 
   bufptr += strlen (dot_framework);
 
@@ -392,24 +392,24 @@
   for (i = 0; framework_header_dirs[i].dirName; i++)
     {
       memcpy (&sfrname[sfrname_len],
-	      framework_header_dirs[i].dirName,
-	      framework_header_dirs[i].dirNameLen);
+        framework_header_dirs[i].dirName,
+        framework_header_dirs[i].dirNameLen);
       strcpy (&sfrname[sfrname_len + framework_header_dirs[i].dirNameLen],
-	      &fname[fname_len]);
+        &fname[fname_len]);
 
       if (stat (sfrname, &st) == 0)
-	{
-	  if (fast_dir != &subframe_dir)
-	    {
-	      if (fast_dir)
-		warning (0, "subframework include %s conflicts with framework include",
-			 fname);
-	      else
-		add_framework (fname, fname_len, &subframe_dir);
-	    }
+  {
+    if (fast_dir != &subframe_dir)
+      {
+        if (fast_dir)
+    warning (0, "subframework include %s conflicts with framework include",
+       fname);
+        else
+    add_framework (fname, fname_len, &subframe_dir);
+      }
 
-	  return sfrname;
-	}
+    return sfrname;
+  }
     }
   free (sfrname);
 
@@ -463,7 +463,7 @@
 
 void
 darwin_register_objc_includes (const char *sysroot ATTRIBUTE_UNUSED,
-			       const char *iprefix, int stdinc)
+             const char *iprefix, int stdinc)
 {
   /* If we want standard includes;  Register the GNU OBJC runtime include
      path if we are compiling OBJC with GNU-runtime.
@@ -477,14 +477,14 @@
       size_t len;
 
      /* See if our directory starts with the standard prefix.
-	 "Translate" them, i.e. replace /usr/local/lib/gcc... with
-	 IPREFIX and search them first.  */
+   "Translate" them, i.e. replace /usr/local/lib/gcc... with
+   IPREFIX and search them first.  */
       if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0
-	  && !strncmp (fname, cpp_GCC_INCLUDE_DIR, len))
-	{
-	  str = concat (iprefix, fname + len, NULL);
-	  add_path (str, INC_SYSTEM, /*c++aware=*/true, false);
-	}
+    && !strncmp (fname, cpp_GCC_INCLUDE_DIR, len))
+  {
+    str = concat (iprefix, fname + len, NULL);
+    add_path (str, INC_SYSTEM, /*c++aware=*/true, false);
+  }
 
       str = update_path (fname, "");
       add_path (str, INC_SYSTEM, /*c++aware=*/true, false);
@@ -498,7 +498,7 @@
 
 void
 darwin_register_frameworks (const char *sysroot,
-			    const char *iprefix ATTRIBUTE_UNUSED, int stdinc)
+          const char *iprefix ATTRIBUTE_UNUSED, int stdinc)
 {
   if (stdinc)
     {
@@ -506,15 +506,15 @@
 
       /* Setup default search path for frameworks.  */
       for (i=0; i<sizeof (framework_defaults)/sizeof(const char *); ++i)
-	{
-	  char *str;
-	  if (sysroot)
-	    str = concat (sysroot, xstrdup (framework_defaults [i]), NULL);
-	  else
-	    str = xstrdup (framework_defaults[i]);
-	  /* System Framework headers are cxx aware.  */
-	  add_system_framework_path (str);
-	}
+  {
+    char *str;
+    if (sysroot)
+      str = concat (sysroot, xstrdup (framework_defaults [i]), NULL);
+    else
+      str = xstrdup (framework_defaults[i]);
+    /* System Framework headers are cxx aware.  */
+    add_system_framework_path (str);
+  }
     }
 
   if (using_frameworks)
@@ -542,14 +542,14 @@
     {
       n = find_subframework_file (fname, cpp_get_path (cpp_get_file (b)));
       if (n)
-	{
-	  /* Logically, the place where we found the subframework is
-	     the place where we found the Framework that contains the
-	     subframework.  This is useful for tracking wether or not
-	     we are in a system header.  */
-	  *dirp = cpp_get_dir (cpp_get_file (b));
-	  return n;
-	}
+  {
+    /* Logically, the place where we found the subframework is
+       the place where we found the Framework that contains the
+       subframework.  This is useful for tracking wether or not
+       we are in a system header.  */
+    *dirp = cpp_get_dir (cpp_get_file (b));
+    return n;
+  }
     }
 
   return 0;
@@ -691,7 +691,7 @@
   if (!version_array)
     goto fail;
 
-  if (version_array[MAJOR] < 10 || version_array[MAJOR] > 11)
+  if (version_array[MAJOR] < 10 || version_array[MAJOR] > 12)
     goto fail;
 
   if (version_array[MAJOR] == 10 && version_array[MINOR] < 10)
@@ -728,7 +728,7 @@
     builtin_define ("__CONSTANT_CFSTRINGS__");
 
   builtin_define_with_value ("__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__",
-			     macosx_version_as_macro(), false);
+           macosx_version_as_macro(), false);
 
   /* Since we do not (at 4.6) support ObjC gc for the NeXT runtime, the
      following will cause a syntax error if one tries to compile gc attributed
@@ -754,14 +754,14 @@
 
 static bool
 handle_c_option (size_t code,
-		 const char *arg,
-		 int value ATTRIBUTE_UNUSED)
+     const char *arg,
+     int value ATTRIBUTE_UNUSED)
 {
   switch (code)
     {
     default:
       /* Unrecognized options that we said we'd handle turn into
-	 errors if not listed here.  */
+   errors if not listed here.  */
       return false;
 
     case OPT_iframework:
@@ -807,15 +807,15 @@
   if (tn) 
     tn = DECL_NAME (tn);
   return (tn 
-	  && IDENTIFIER_POINTER (tn)
-	  && !strncmp (IDENTIFIER_POINTER (tn), "CFStringRef",
-		       strlen ("CFStringRef")));
+    && IDENTIFIER_POINTER (tn)
+    && !strncmp (IDENTIFIER_POINTER (tn), "CFStringRef",
+           strlen ("CFStringRef")));
 }
 
 /* At present the behavior of this is undefined and it does nothing.  */
 static void
 darwin_check_cfstring_format_arg (tree ARG_UNUSED (format_arg), 
-				  tree ARG_UNUSED (args_list))
+          tree ARG_UNUSED (args_list))
 {
 }
 
@@ -857,7 +857,7 @@
   char *buf = (char *) alloca (len);
 
   gcc_checking_assert (!strncmp (name, ".objc_class_name_", 17)
-		       || !strncmp (name, "*.objc_category_name_", 21));
+           || !strncmp (name, "*.objc_category_name_", 21));
 
   /* Mimic default_globalize_label.  */
   snprintf (buf, len, ".globl\t%s", xname);
@@ -875,11 +875,11 @@
 
 #undef  TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE
 #define TARGET_OBJC_DECLARE_UNRESOLVED_CLASS_REFERENCE \
-	darwin_objc_declare_unresolved_class_reference
+  darwin_objc_declare_unresolved_class_reference
 
 #undef  TARGET_OBJC_DECLARE_CLASS_DEFINITION
 #define TARGET_OBJC_DECLARE_CLASS_DEFINITION \
-	darwin_objc_declare_class_definition
+  darwin_objc_declare_class_definition
 
 #undef  TARGET_STRING_OBJECT_REF_TYPE_P
 #define TARGET_STRING_OBJECT_REF_TYPE_P darwin_cfstring_ref_p
